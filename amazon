#!/usr/bin/python
#
# Amazon book offer SMS notify. 
#

import StringIO,httplib,lxml.html,smtplib,time,re
from email.mime.text import MIMEText

BOOK=['0812555244','B007YTPTTC','0812577698','B004H0TS0C']
CURRENCY=['EUR','GBP']
CONDITION=['Good','Gut','Very Good','Sehr gut','Like New','Wie neu']
SERVER={'EUR':'www.amazon.de','GBP':'www.amazon.co.uk'}
LIMIT=160

OUTUSR='root@root.cz'
OUTSRV='smtps21.cz.o2.com'
OUTBOX='+420xxx@sms.cz.o2.com'

HISTORY=[]
TOKEN=True

#----------------------------

def get_currency(curr):
    try:
        c = httplib.HTTPConnection('www.cnb.cz',timeout=10)
        c.request('GET','/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt')
        r = c.getresponse()
        if r.status == 200:
            for LINE in r.read().split('\n'):
                if curr in LINE: return float(re.sub(',','.',re.sub('.*\|(.*)$','\\1',LINE)))
        c.close()
    except:
        if curr == "GBP": return 28.7
        if curr == "EUR": return 25.6

def clean_price(curr,price):
    try:
        if curr == 'GBP': return float(re.sub('\xa3','',price.strip()))# Pound char
        if curr == 'EUR': return float(re.sub(',','.',re.sub('EUR ','',price.strip())))# 'EUR ' + decimal
    except: return 0

def get_quality(q):
    if q:
        if q[0].text:
            for  quality in CONDITION:
                if quality in q[0].text: return 1
    return 0

def get_delivery(d):
    if d:
        options = d[0].iter('span')
        for o in options:
            if o.text:
                if 'Dispatched from' in o.text: return 1
                if 'Versand aus' in o.text: return 1
    return 0

def parse_offer(curr,book,log):
    out = {}
    c = httplib.HTTPSConnection(SERVER[curr],timeout=10)
    c.request('GET','/gp/offer-listing/' + book)
    r = c.getresponse()
    if r.status == 200:
        p = lxml.html.HTMLParser()
        t = lxml.html.parse(StringIO.StringIO(r.read()),p)
        o = t.xpath("//div[@class='a-row a-spacing-mini olpOffer']")
        for i in range(0,len(o)):
            price = o[i].xpath(".//span[contains(@class,'olpOfferPrice')]")
            shipping = o[i].xpath(".//span[contains(@class,'olpShippingPrice')]")
            vendor = o[i].xpath(".//h3[contains(@class,'olpSellerName')]//a")
            quality = o[i].xpath(".//span[contains(@class,'olpCondition')]")
            delivery = o[i].xpath(".//div[contains(@class,'olpDeliveryColumn')]")
            if get_quality(quality) and get_delivery(delivery):
                if not vendor: vendor = ''
                else: vendor = vendor[0].text
                if not price: price = 0
                else: price = clean_price(curr,price[0].text)
                if not shipping: shipping = 0
                else: shipping = clean_price(curr,shipping[0].text)
                total = (price + shipping) * get_currency(curr)
                if total <= LIMIT: out[price]=vendor
    c.close()
    return out

def sms_notify(offer,vendor,curr,book):
    msg = MIMEText(str(offer) + ' ' + vendor + ' ' + curr + ' ' + book)
    msg['From'] = OUTUSR
    msg['To'] = OUTBOX
    mail = smtplib.SMTP(OUTSRV)
    mail.sendmail(OUTUSR,OUTBOX,msg.as_string())
    mail.quit()

#----------------------------

log = open('/var/log/book.log','a',0)# no buffering damnit!

while 1:
    if time.gmtime()[4] == 0 and TOKEN:
        TOKEN = False
        try:
            for book in BOOK:
                for curr in CURRENCY:
                    offers = parse_offer(curr,book,log)
                    for offer in offers:
                        if not offer in HISTORY:
                            HISTORY.append(offer)
                            sms_notify(offer,offers[offer],curr,book)
                            log.write(
                                time.strftime('%d.%m.%y %H:%M') +
                                ' Hit: ' +
                                str(offer) +
                                ' ' + offers[offer] +
                                ' ' + curr +
                                ' ' + book +
                                '\n'
                            )
                    time.sleep(5)
        except: log.write(time.strftime('%d.%m.%y %H:%M') + ' Connection error.\n')
    if time.gmtime()[4] == 1: TOKEN=True
    time.sleep(5)

log.close()

