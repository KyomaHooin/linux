#!/usr/bin/python
#
# Amazon book offer SMS notify. 
#

import StringIO,httplib,lxml.html,smtplib,time,re
from email.mime.text import MIMEText

BOOK=['1841499897','B0163DU4C6']
CURRENCY=['EUR','GBP']
SERVER={'EUR':'www.amazon.de','GBP':'www.amazon.co.uk'}
LIMIT=150

OUTUSR='root@root.cz'
OUTSRV='smtps21.cz.o2.com'
OUTBOX='+420xxx@sms.cz.o2.com'

HISTORY=[]
TOKEN=True

#----------------------------

def get_currency(curr):
    try:
        c = httplib.HTTPConnection('www.cnb.cz',timeout=10)
        c.request('GET','/cs/financni_trhy/devizovy_trh/kurzy_devizoveho_trhu/denni_kurz.txt')
        r = c.getresponse()
        if r.status == 200:
            for LINE in r.read().split('\n'):
                if curr in LINE: return float(re.sub(',','.',re.sub('.*\|(.*)$','\\1',LINE)))
        c.close()
    except: return 0

def clean_price(curr,price):
    try:
        if curr == 'GBP': return float(re.sub('\xa3','',price.strip()))# Pound char
        if curr == 'EUR': return float(re.sub(',','.',re.sub('EUR ','',price.strip())))# 'EUR ' + decimal
    except: return 0

def parse_offer(curr,book):
    out = []
    c = httplib.HTTPSConnection(SERVER[curr],timeout=10)
    c.request('GET','/gp/offer-listing/' + book)
    r = c.getresponse()
    if r.status == 200:
        p = lxml.html.HTMLParser()
        t = lxml.html.parse(StringIO.StringIO(r.read()),p)
        o = t.xpath("//div[@class='a-row a-spacing-mini olpOffer']")
        for i in range(0,len(o)):
            price = o[i].xpath(".//span[contains(@class,'olpOfferPrice')]")
            shipping = o[i].xpath(".//span[contains(@class,'olpShippingPrice')]")
            if not price: price = 0
            else: price = clean_price(curr,price[0].text)
            if not shipping: shipping = 0
            else: shipping = clean_price(curr,shipping[0].text)
            total = (price + shipping) * get_currency(curr)
            if total <= LIMIT: out.append(total)
    c.close()
    return out

def sms_notify(offer,curr,book):
    msg = MIMEText(str(offer) + ' ' + curr + ' ' + book)
    msg['From'] = OUTUSR
    msg['To'] = OUTBOX
    mail = smtplib.SMTP(OUTSRV)
    mail.sendmail(OUTUSR,OUTBOX,msg.as_string())
    mail.quit()

#----------------------------

f = open('/var/log/book.log','a')

while 1:
    if time.gmtime()[4] % 30 == 0 and TOKEN:
        TOKEN = False
        try:
            for book in BOOK:
                for curr in CURRENCY:
                    for offer in parse_offer(curr,book):
                        if not offer in HISTORY:
                            HISTORY.append(offer)
                            sms_notify(format(offer,'.2f'),curr,book)
        except: f.write('Program error.\n')
    if time.gmtime()[4] % 30 == 1: TOKEN=True
    time.sleep(5)

f.close()

